<?xml version="1.0"?>
<launch>
    
    <arg name="bag_file"                default="2023-05-08-14-46-13_raw_data_tfl_radar_raekoda.bag" doc="bag file to play" />
    <arg name="speed_limit"             default="40" />
    <arg name="tfl_detector"            default="camera"        doc="camera, mqtt, mqtt_camera_fusion" />
    <arg name="lanelet2_map_name"       default="tartu_large.osm" />
    <arg name="use_localization"        default="true"          doc="replace localization topics"/>
    <arg name="use_detection"           default="true"         doc="replace object detection topics"/>
    <arg name="use_planning"            default="true"          doc="replace planning topics"/>
    <arg name="use_control"             default="true"          doc="replace control topics"/>
    <arg name="onnx_path"               default="$(find autoware_mini)/data/models/traffic_lights/tlr_model.onnx" doc="onnx model path" />


    <!-- Use simulation time from bag -->
    <param name="/use_sim_time" value="true" />

    <!-- Play back bag -->
    <node pkg="rosbag" type="play" name="player" required="true" args="$(find autoware_mini)/data/bags/$(arg bag_file) --clock --queue=1">
        <!-- Rename saved topics that are replaced by current ones -->
        <remap from="/tf" to="/bag/tf" />
        <remap from="/tf_static" to="/bag/tf_static" />
        <remap from="/localization/current_pose" to="/bag/localization/current_pose" if="$(arg use_localization)"/>
        <remap from="/localization/current_velocity" to="/bag/localization/current_velocity" if="$(arg use_localization)"/>
        <remap from="/localization/odometry" to="/bag/localization/odometry" if="$(arg use_localization)"/>
        <remap from="/detection/lidar/points_ground" to="/bag/detection/lidar/points_ground" if="$(arg use_detection)"/>
        <remap from="/detection/lidar/points_no_ground" to="/bag/detection/lidar/points_no_ground" if="$(arg use_detection)"/>
        <remap from="/detection/lidar/points_clustered" to="/bag/detection/lidar/points_clustered" if="$(arg use_detection)"/>
        <remap from="/detection/lidar/points_filtered" to="/bag/detection/lidar/points_filtered" if="$(arg use_detection)"/>
        <remap from="/detection/lidar/detected_objects" to="/bag/detection/lidar/detected_objects" if="$(arg use_detection)"/>
        <remap from="/detection/lidar/detected_objects_markers" to="/bag/detection/lidar/detected_objects_markers" if="$(arg use_detection)"/>
        <remap from="/detection/radar/detected_objects" to="/bag/detection/radar/detected_objects" if="$(arg use_detection)"/>
        <remap from="/detection/radar/detected_objects_markers" to="/bag/detection/radar/detected_objects_markers" if="$(arg use_detection)"/>
        <remap from="/detection/detected_objects" to="/bag/detection/detected_objects" if="$(arg use_detection)"/>
        <remap from="/detection/detected_objects_markers" to="/bag/detection/detected_objects_markers" if="$(arg use_detection)"/>
        <remap from="/detection/tracked_objects" to="/bag/detection/tracked_objects" if="$(arg use_detection)"/>
        <remap from="/detection/tracked_objects_markers" to="/bag/detection/tracked_objects_markers" if="$(arg use_detection)"/>
        <remap from="/detection/predicted_objects" to="/bag/detection/predicted_objects" if="$(arg use_detection)"/>
        <remap from="/detection/predicted_objects_markers" to="/bag/detection/predicted_objects_markers" if="$(arg use_detection)"/>
        <remap from="/detection/final_objects" to="/bag/detection/final_objects" if="$(arg use_detection)"/>
        <remap from="/detection/final_objects_markers" to="/bag/detection/final_objects_markers" if="$(arg use_detection)"/>
        <remap from="/planning/lanelet2_map_markers" to="/bag/planning/lanelet2_map_markers" if="$(arg use_planning)"/>
        <remap from="/planning/global_path" to="/bag/planning/global_path" if="$(arg use_planning)"/>
        <remap from="/planning/global_path_markers" to="/bag/planning/global_path_markers" if="$(arg use_planning)"/>
        <remap from="/planning/smoothed_path" to="/bag/planning/smoothed_path" if="$(arg use_planning)"/>
        <remap from="/planning/smoothed_path_markers" to="/bag/planning/smoothed_path_markers" if="$(arg use_planning)"/>
        <remap from="/planning/local_path" to="/bag/planning/local_path" if="$(arg use_planning)"/>
        <remap from="/planning/local_path_markers" to="/bag/planning/local_path_markers" if="$(arg use_planning)"/>
        <remap from="/planning/stop_line_markers" to="/bag/planning/stop_line_markers" if="$(arg use_planning)"/>
        <remap from="/planning/target_lane_markers" to="/bag/planning/target_lane_markers" if="$(arg use_planning)"/>
        <remap from="/detection/traffic_light_status" to="/bag/detection/traffic_light_status" />
        <remap from="/detection/camera_fl/traffic_light_status" to="/bag/detection/camera_fl/traffic_light_status" />
        <remap from="/detection/camera_fl/traffic_light_roi" to="/bag/detection/camera_fl/traffic_light_roi" />
        <remap from="/detection/camera_fr/traffic_light_status" to="/bag/detection/camera_fr/traffic_light_status" />
        <remap from="/detection/camera_fr/traffic_light_roi" to="/bag/detection/camera_fr/traffic_light_roi" />
        <remap from="/detection/camera/traffic_light_status" to="/bag/detection/camera/traffic_light_status" />
        <remap from="/detection/mqtt/traffic_light_status" to="/bag/detection/mqtt/traffic_light_status" />
        <remap from="/control/vehicle_cmd" to="/bag/control/vehicle_cmd" if="$(arg use_control)"/>
        <remap from="/dashboard/current_speed" to="/bag/dashboard/current_speed" />
        <remap from="/dashboard/target_speed" to="/bag/dashboard/target_speed" />
        <remap from="/dashboard/closest_object_distance" to="/bag/dashboard/closest_object_distance" />
        <remap from="/dashboard/closest_object_speed" to="closest_object_speed" />
        <remap from="/dashboard/acceleration" to="/bag/dashboard/acceleration" />
        <remap from="/dashboard/acceleration_limit" to="/bag/dashboard/acceleration_limit" />
        <remap from="/dashboard/deceleration_limit" to="/bag/dashboard/deceleration_limit" />
        <!-- For compatibility with older bags and Vella bags -->
        <remap from="/points_raw_center" to="/lidar_center/points_raw"/>
        <remap from="/points_raw_front" to="/lidar_front/points_raw"/>
        <remap from="/lidar_0/vlp32/pcl2" to="/lidar_center/points_raw"/>
    </node>


     <!-- Localization -->
    <group ns="localization">
        <node pkg="autoware_mini_practice_solutions" type="localizer.py" name="localizer" output="screen" required="true" />
        <rosparam command="load" file="$(find autoware_mini_practice_solutions)/config/localization.yaml" />
    </group>
    
    <!-- Planning -->
    <group ns="planning">

        <!-- Lanelet2 map visualizer -->
        <node pkg="autoware_mini" type="lanelet2_map_visualizer.py" name="lanelet2_map_visualizer" output="screen" required="true">
            <param name="lanelet2_map_name" value="$(find autoware_mini)/data/maps/$(arg lanelet2_map_name)" />
        </node>

        <!-- Lanelet2 global planner -->
        <node pkg="autoware_mini_practice_solutions" type="lanelet2_global_planner.py" name="lanelet2_global_planner" output="screen" required="true">
            <param name="lanelet2_map_name" value="$(find autoware_mini)/data/maps/$(arg lanelet2_map_name)" />
            <param name="speed_limit"       value="$(arg speed_limit)" />
        </node>

        <!-- Global path visualizer -->
        <node pkg="autoware_mini" type="global_path_visualizer.py" name="global_path_visualizer" output="screen" required="true"/>

        <!-- Local planner -->
        <node pkg="autoware_mini_practice_solutions" type="simple_local_planner.py" name="simple_local_planner" output="screen" required="true" >
            <param name="lanelet2_map_name" value="$(find autoware_mini)/data/maps/$(arg lanelet2_map_name)" />
        </node>
        <node pkg="autoware_mini" type="local_path_visualizer.py" name="local_path_visualizer" output="screen" required="true"/>

        <!-- Config -->
        <rosparam command="load" file="$(find autoware_mini_practice_solutions)/config/planning.yaml" />

    </group>

    <!-- Detection -->
    <group ns="detection">
        <group if="$(arg use_detection)" ns="lidar">
            <group ns="center">
                <node pkg="autoware_mini" type="ground_removal.py" name="ground_removal" output="screen" required="true">
                    <remap from="points_raw" to="/lidar_center/points_raw" />
                </node>
            </group>

            <node pkg="nodelet" type="nodelet" name="pcl_manager" args="manager" output="screen" required="true" />
            <node pkg="nodelet" type="nodelet" name="voxel_grid_filter" args="load pcl/VoxelGrid pcl_manager" output="screen" required="true">
                <remap from="~input" to="/detection/lidar/center/points_no_ground" />
                <remap from="~output" to="/detection/lidar/points_filtered" />
            </node>

            <node pkg="autoware_mini_practice_solutions" type="points_clusterer.py" name="points_clusterer" output="screen" required="true" />
            <node pkg="autoware_mini_practice_solutions" type="cluster_detector.py" name="cluster_detector" output="screen" required="true" />

        </group>

        <node if="$(arg use_detection)" pkg="autoware_mini" type="ema_tracker.py" name="ema_tracker" output="screen" required="true" >
            <remap from="detected_objects" to="/detection/lidar/detected_objects" />
            <remap from="tracked_objects" to="final_objects" />
        </node>

        <node if="$(arg use_detection)" pkg="autoware_mini" type="detected_objects_visualizer.py" name="final_objects_visualizer" output="screen" required="true">
            <remap from="detected_objects" to="final_objects" />
            <remap from="detected_objects_markers" to="final_objects_markers" />
        </node>

        <!-- MQTT traffic light detector -->
        <node if="$(eval 'mqtt' in tfl_detector)" pkg="autoware_mini" type="mqtt_traffic_light_detector.py" name="mqtt_traffic_light_detector" output="screen" required="true">
            <param name="lanelet2_map_name" value="$(find autoware_mini)/data/maps/$(arg lanelet2_map_name)" />
            <remap if="$(eval tfl_detector=='mqtt_camera_fusion')" from="traffic_light_status" to="mqtt/traffic_light_status"/>
        </node>

        <!-- Camera based traffic light detection -->
        <group if="$(eval 'camera' in tfl_detector)">

            <!-- Camera FL -->
            <node pkg="autoware_mini_practice_solutions" type="camera_traffic_light_detector.py" name="camera_traffic_light_detector" output="screen" required="true" ns="camera_fl">
                <remap from="camera_info" to="/camera_fl/camera_info"/>
                <remap from="image_raw" to="/camera_fl/image_raw"/>
                <param name="lanelet2_map_name" value="$(find autoware_mini)/data/maps/$(arg lanelet2_map_name)" />
                <param name="onnx_path" value="$(arg onnx_path)" />
            </node>

            <!-- Camera FR -->
            <node pkg="autoware_mini_practice_solutions" type="camera_traffic_light_detector.py" name="camera_traffic_light_detector" output="screen" required="true" ns="camera_fr">
                <remap from="camera_info" to="/camera_fr/camera_info"/>
                <remap from="image_raw" to="/camera_fr/image_raw"/>
                <param name="lanelet2_map_name" value="$(find autoware_mini)/data/maps/$(arg lanelet2_map_name)" />
                <param name="onnx_path" value="$(arg onnx_path)" />
            </node>

            <node pkg="autoware_mini" type="traffic_light_majority_merger.py" name="traffic_light_majority_merger" output="screen" required="true" >
                <remap if="$(eval tfl_detector=='mqtt_camera_fusion')" from="traffic_light_status" to="camera/traffic_light_status"/>
            </node>

            <node if="$(eval tfl_detector=='mqtt_camera_fusion')" pkg="autoware_mini" type="traffic_light_priority_merger.py" name="traffic_light_priority_merger" output="screen" required="true" >
                <remap from="tfl_status_topic_1" to="mqtt/traffic_light_status"/>
                <remap from="tfl_status_topic_2" to="camera/traffic_light_status"/>
            </node>

        </group>

        <rosparam command="load" file="$(find autoware_mini_practice_solutions)/config/detection.yaml"/>
    </group>

    <!-- Control -->
    <group ns="control">
        <!-- Follower -->
        <node pkg="autoware_mini_practice_solutions" type="pure_pursuit_follower.py" name="pure_pursuit_follower" output="screen" required="true" >
            <remap from="path" to="/planning/local_path" />
        </node>
        <rosparam command="load" file="$(find autoware_mini_practice_solutions)/config/control.yaml"/>
    </group>

    <!-- Load vehicle config data -->
    <rosparam command="load" file="$(find autoware_mini)/config/vehicle.yaml" ns="vehicle"/>

    <!-- Load static transforms -->
    <node pkg="robot_state_publisher" type="robot_state_publisher" name="vehicle_platform_frames">
        <remap from="robot_description" to="vehicle_platform_frames/robot_description" />
        <param name="robot_description" textfile="$(find vehicle_platform)/config/platform.urdf" />
    </node>

    <include file="$(find autoware_mini)/launch/dashboard.launch" />

    <node type="rviz" name="rviz" pkg="rviz" args="-d $(find autoware_mini_practice_solutions)/rviz/practice_7.rviz" required="true" />


</launch>