<?xml version="1.0"?>
<launch>
    
    <arg name="use_manual_control"      default="false"                 doc="use manual control for carla"/>
    <arg name="global_planner"          default="lanelet2"              doc="waypoints, lanelet2" />
    <arg name="localizer"               default="carla"                 doc="novatel, carla" />
    <arg name="detector"                default="carla"                 doc="cluster, carla" />
    <arg name="tfl_detector"            default="carla"                 doc="carla, camera, mqtt_camera_fusion" />
    <arg name="onnx_path"               default="$(find autoware_mini)/data/models/traffic_lights/tlr_model.onnx" doc="onnx model path" />
    <arg name="tracker"                 default="ema"                   if="$(eval detector != 'carla')" />
    <arg name="tracker"                 default="none"                  if="$(eval detector == 'carla')" />
    <arg name="predictor"               default="none"                  doc="none, naive" />
    <arg name='map_name'                default='tartu_demo'/>
    <arg name='generate_traffic'        default='true'/>
    <arg name="follower"                default="pure_pursuit"          doc="pure_pursuit, stanley" />
    <arg name="waypoints_file"          default="waypoints_erm_utm_1m.csv" />
    <arg name="lanelet2_map_name"       default="$(arg map_name).osm" />
    <arg name='use_lexus_model'         default='true' />
    <arg name='use_lidar_center'        default='true' />
    <arg name='use_lidar_front'         default='false' />
    <arg name="more_visualizations"     default="false"                 doc="By default only visualize final detections" />


    <!-- Localization -->
    <group ns="localization">
        <node if="$(eval localizer=='novatel')" pkg="autoware_mini_practice_solutions" type="localizer.py" name="localizer" output="screen" required="true" />

        <node if="$(eval localizer=='carla')" pkg='autoware_mini' type='carla_localizer.py' name='carla_localizer' output='screen' required="true" />

        <rosparam command="load" file="$(find autoware_mini_practice_solutions)/config/localization.yaml" />
    </group>

    <!-- Detection -->
    <group ns="detection">
        <group if="$(eval 'lidar' in detector)" ns="lidar">
            <remap unless="$(eval 'fusion' in detector)" from="detected_objects" to="/detection/detected_objects" />
            <group if="$(eval 'lidar_cluster' in detector)">
                <node pkg="nodelet" type="nodelet" name="pcl_manager" args="manager" output="screen" required="true" />
                <group if="$(arg use_lidar_center)" ns="center">
                    <!-- Only functional in Carla simulation -->
                    <node pkg="nodelet" type="nodelet" name="crop_box" args="load pcl/CropBox /detection/lidar/pcl_manager" output="screen" required="true">
                        <remap from="~input" to="/lidar_center/pointcloud" />
                        <remap from="~output" to="/lidar_center/points_raw" />
                    </node>
                    <node type="ground_removal.py" name="ground_removal" pkg="autoware_mini" output="screen" required="true">
                        <remap from="points_raw" to="/lidar_center/points_raw" />
                        <remap unless="$(arg use_lidar_front)" from="points_ground" to="/detection/lidar/points_ground" />
                        <remap unless="$(arg use_lidar_front)" from="points_no_ground" to="/detection/lidar/points_no_ground" />
                    </node>
                </group>
                <group if="$(arg use_lidar_front)" ns="front">
                    <node pkg="nodelet" type="nodelet" name="crop_box" args="load pcl/CropBox /detection/lidar/pcl_manager" output="screen" required="true">
                        <remap from="~input" to="/lidar_front/points" />
                        <remap from="~output" to="/lidar_front/points_cleaned" />
                    </node>
                    <node type="ground_removal.py" name="ground_removal" pkg="autoware_mini" output="screen" required="true">
                        <remap from="points_raw" to="/lidar_front/points_cleaned" />
                        <remap unless="$(arg use_lidar_center)" from="points_ground" to="/detection/lidar/points_ground" />
                        <remap unless="$(arg use_lidar_center)" from="points_no_ground" to="/detection/lidar/points_no_ground" />
                    </node>
                </group>
                <group if="$(eval use_lidar_center and use_lidar_front)">
                    <node type="points_concatenator.py" name="points_concatenator" pkg="autoware_mini" output="screen" required="true">
                        <remap from="points1" to="center/points_no_ground" />
                        <remap from="points2" to="front/points_no_ground" />
                        <remap from="points_concatenated" to="points_no_ground" />
                    </node>
                </group>
                <node pkg="nodelet" type="nodelet" name="voxel_grid_filter" args="load pcl/VoxelGrid pcl_manager" output="screen" required="true">
                    <remap from="~input" to="/detection/lidar/points_no_ground" />
                    <remap from="~output" to="/detection/lidar/points_filtered" />
                </node>
                <node pkg="autoware_mini_practice_solutions" type="points_clusterer.py" name="points_clusterer" output="screen" required="true" />
                <node pkg="autoware_mini_practice_solutions" type="cluster_detector.py" name="cluster_detector"  output="screen" required="true" />
            </group>

            <group if="$(arg more_visualizations)">
                <!--visualizer for lidar detections-->
                <node if="$(eval 'fusion' in detector)" type="detected_objects_visualizer.py" name="lidar_objects_visualizer" pkg="autoware_mini" output="screen" required="true" />
            </group>
        </group>

        <!-- Obstacle detection -->
        <!-- Carla's ground truth objects -->
        <node if="$(eval detector=='carla')" pkg="autoware_mini" type="carla_detector.py" name="carla_detector" output="screen" required="true" />

        <!-- Obstacle simulator -->
        <node if="$(eval detector=='sim')" pkg="autoware_mini" type="obstacle_simulation.py" name="obstacle_simulation" output="screen" required="true" />

        <!-- Detected objects visualizer -->
        <node if="$(arg more_visualizations)" type="detected_objects_visualizer.py" name="detected_objects_visualizer" pkg="autoware_mini" output="screen" required="true" />

        <group if="$(eval tracker=='ema')">
            <remap if="$(eval predictor=='none')" from="tracked_objects" to="final_objects" />
            <node pkg="autoware_mini" type="ema_tracker.py" name="ema_tracker" output="screen" required="true" />
            <node if="$(arg more_visualizations)" type="detected_objects_visualizer.py" name="tracked_objects_visualizer" pkg="autoware_mini" output="screen" required="true">
                <remap from="detected_objects" to="tracked_objects" />
                <remap from="detected_objects_markers" to="tracked_objects_markers" />
            </node>
        </group>
        <node if="$(eval tracker=='none')" pkg="topic_tools" type="relay" args="detected_objects tracked_objects" name="detected_objects_relay" output="screen" required="true" />

        <node if="$(eval predictor=='none')" pkg="topic_tools" type="relay" args="tracked_objects final_objects" name="tracked_objects_relay" output="screen" required="true" />

        <!-- Final objects visualizer -->
        <node type="detected_objects_visualizer.py" name="final_objects_visualizer" pkg="autoware_mini" output="screen" required="true">
            <remap from="detected_objects" to="final_objects" />
            <remap from="detected_objects_markers" to="final_objects_markers" />
        </node>

        <!-- Traffic light detection -->
        <!-- Carla's ground truth traffic lights -->
        <node if="$(eval tfl_detector=='carla')" pkg="autoware_mini" type="carla_traffic_light_detector.py" name="carla_traffic_light_detector" output="screen" required="true">
            <param name="lanelet2_map_name" value="$(find autoware_mini)/data/maps/$(arg lanelet2_map_name)" />
        </node>

        <!-- MQTT traffic light detector -->
        <node if="$(eval 'mqtt' in tfl_detector)" pkg="autoware_mini" type="mqtt_traffic_light_detector.py" name="mqtt_traffic_light_detector" output="screen" required="true">
            <param name="lanelet2_map_name" value="$(find autoware_mini)/data/maps/$(arg lanelet2_map_name)" />
            <remap if="$(eval tfl_detector=='mqtt_camera_fusion')" from="traffic_light_status" to="mqtt/traffic_light_status"/>
        </node>

        <!-- Camera based traffic light detection -->
        <group if="$(eval 'camera' in tfl_detector)">

            <!-- Camera FL -->
            <node pkg="autoware_mini_practice_solutions" type="camera_traffic_light_detector.py" name="camera_traffic_light_detector_left" output="screen" required="true" ns="camera_fl">
                <remap from="camera_info" to="/camera_fl/camera_info"/>
                <remap from="image_raw" to="/camera_fl/image_raw"/>
                <param name="lanelet2_map_name" value="$(find autoware_mini)/data/maps/$(arg lanelet2_map_name)" />
                <param name="onnx_path" value="$(arg onnx_path)" />
            </node>

            <!-- Camera FR -->
            <node pkg="autoware_mini_practice_solutions" type="camera_traffic_light_detector.py" name="camera_traffic_light_detector_right" output="screen" required="true" ns="camera_fr">
                <remap from="camera_info" to="/camera_fr/camera_info"/>
                <remap from="image_raw" to="/camera_fr/image_raw"/>
                <param name="lanelet2_map_name" value="$(find autoware_mini)/data/maps/$(arg lanelet2_map_name)" />
                <param name="onnx_path" value="$(arg onnx_path)" />
            </node>

            <node pkg="autoware_mini" type="traffic_light_majority_merger.py" name="traffic_light_majority_merger" output="screen" required="true" >
                <remap if="$(eval tfl_detector=='mqtt_camera_fusion')" from="traffic_light_status" to="camera/traffic_light_status"/>
            </node>

            <node if="$(eval tfl_detector=='mqtt_camera_fusion')" pkg="autoware_mini" type="traffic_light_priority_merger.py" name="traffic_light_priority_merger" output="screen" required="true" >
                <remap from="tfl_status_topic_1" to="mqtt/traffic_light_status"/>
                <remap from="tfl_status_topic_2" to="camera/traffic_light_status"/>
            </node>

        </group>

        <rosparam command="load" file="$(find autoware_mini)/config/detection.yaml"/>
        <rosparam command="load" file="$(find autoware_mini_practice_solutions)/config/detection.yaml" />
    </group>

    <!-- Planning -->
    <group ns="planning">

        <!-- Lanelet2 map visualizer -->
        <node pkg="autoware_mini" type="lanelet2_map_visualizer.py" name="lanelet2_map_visualizer" output="screen" required="true">
            <param name="lanelet2_map_name" value="$(find autoware_mini)/data/maps/$(arg lanelet2_map_name)" />
        </node>

        <!-- Waypoint loader -->
        <node if="$(eval global_planner=='waypoints')"  pkg="autoware_mini" type="waypoint_loader.py" name="waypoint_loader" output="screen" required="true">
            <param name="waypoints_file" value="$(find autoware_mini)/data/trajectories/$(arg waypoints_file)" />
        </node>

        <!-- Lanelet2 global planner -->
        <node if="$(eval global_planner=='lanelet2')" pkg="autoware_mini_practice_solutions" type="lanelet2_global_planner.py" name="lanelet2_global_planner" output="screen" required="true">
            <param name="lanelet2_map_name" value="$(find autoware_mini)/data/maps/$(arg lanelet2_map_name)" />
        </node>

        <!-- Global path visualizer -->
        <node pkg="autoware_mini" type="global_path_visualizer.py" name="global_path_visualizer" output="screen" required="true"/>


        <!-- Local planner -->
        <node pkg="autoware_mini_practice_solutions" type="simple_local_planner.py" name="simple_local_planner" output="screen" required="true" >
            <param name="lanelet2_map_name" value="$(find autoware_mini)/data/maps/$(arg lanelet2_map_name)" />
        </node>
        <node pkg="autoware_mini" type="local_path_visualizer.py" name="local_path_visualizer" output="screen" required="true"/>

        <!-- Config -->
        <rosparam command="load" file="$(find autoware_mini)/config/planning.yaml" />
        <rosparam command="load" file="$(find autoware_mini_practice_solutions)/config/planning.yaml" />
    </group>

    <!-- Control -->
    <group ns="control">
        <!-- Follower -->
        <node if="$(eval follower=='pure_pursuit')" pkg="autoware_mini_practice_solutions" type="pure_pursuit_follower.py" name="pure_pursuit_follower" output="screen" required="true" >
            <remap from="/control/path" to="/planning/local_path"/>
        </node>

        <rosparam command="load" file="$(find autoware_mini)/config/control.yaml"/>
        <rosparam command="load" file="$(find autoware_mini_practice_solutions)/config/control.yaml"/>
    </group>

    <!-- Vehicle platform -->
    <include file="$(find vehicle_platform)/launch/platform.launch" >
        <arg name="use_lexus_model"     value="true" />
    </include>

    <!-- Carla platform -->
    <include file="$(find autoware_mini)/launch/platform/carla.launch">
        <arg name='map_name'                            value='$(arg map_name)'/>
        <arg name="use_manual_control"                  value="$(arg use_manual_control)" />
        <arg name="use_lidar"                           value="$(eval 'lidar' in detector and detector != 'lidar_vella')" />
        <arg name="use_radar"                           value="$(eval 'radar' in detector)" />
        <arg name="use_gnss"                            value="$(eval localizer == 'novatel')" />
        <arg name="use_cam"                             value="$(eval 'camera' in tfl_detector)" />
        <arg name="generate_traffic"                    value="$(arg generate_traffic)" />
    </include>

    <!-- Rviz -->
    <include file="$(find autoware_mini)/launch/dashboard.launch" />
    <node type="rviz" name="rviz" pkg="rviz" args="-d $(find autoware_mini)/rviz/autoware_mini.rviz" required="true">
        <rosparam command="load" file="$(find autoware_mini)/config/actions.yaml"/>
    </node>

</launch>